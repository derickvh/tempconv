//build.gradle

def iibEnv, appName, barfileDir, version, integrationNodes, paramsMQSICreateBarfile, soapUIProject, soapUIParams, soapuiExec

task loadConfiguration {

  description 'Loads IIB Project Build Configuration from build.config file.'

  def config = new ConfigSlurper().parse(file('build.config').toURL())
  ant.echo("Build configuration file loaded ...")

  config.each { k,v  ->

    appName = v.appName
    iibEnv = v.iibEnv
    barfileDir = v.barfileDir
    version = v.version
    paramsMQSICreateBarfile = v.paramsMQSICreateBarfile
    soapUIProject = v.soapUIProject
    soapUIParams = v.soapUIParams
    integrationNodes = v.integrationNodes
  }
}

/* Select appropriate override properties file based on target deployment environment */

switch (iibEnv) {

         case "PROD":
          ant.properties['iib.override.file'] = 'override-prod.properties'
          break;
         case "QA":
          ant.properties['iib.override.file'] = 'override-qa.properties'
          break;
         default:
         ant.properties['iib.override.file'] = 'override.properties'
}

  // Set Ant properties based on underlying platform

if (org.gradle.internal.os.OperatingSystem.current().windows) {

        ant.properties['mqsi.deployw'] = 'mqsideployw.bat'
        ant.properties['mqsi.deployw.param'] = '/C'
        ant.properties['mqsi.createbar'] = 'mqsicreatebar.exe'
        ant.properties['iib.path'] = mqsiprofilePathWin
        ant.properties['cmd.exec'] = 'cmd.exe'

        soapuiExec = soapUIPathWin + '\\testrunner.bat'

      } else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {

        ant.properties['mqsi.deployw'] = 'mqsideployw'
        ant.properties['mqsi.deployw.param'] = ''
        ant.properties['mqsi.createbar'] = 'mqsicreatebar'
        ant.properties['iib.path'] = mqsiprofilePathMacOS
        ant.properties['cmd.exec'] = projectDir.getPath() + '/mqsideployw'

        soapuiExec = soapUIPathMacOS + '/testrunner.sh'

      } else {

        ant.properties['mqsi.deployw'] = 'mqsideployw'
        ant.properties['mqsi.deployw.param'] = ''
        ant.properties['mqsi.createbar'] = 'mqsicreatebar'
        ant.properties['iib.path'] = mqsiprofilePathUnix
        ant.properties['cmd.exec'] = projectDir.getPath() + '/mqsideployw'

        soapuiExec = soapUIPathUnix + '/testrunner.sh'
      }

    ant.properties['workspace.dir'] = projectDir.getParent()
    ant.properties['iib.barfile.dir'] = barfileDir
    ant.properties['iib.bar.version'] = version
    ant.properties['iib.bar'] = appName
    ant.properties['iib.mqsicreatebar.params'] = paramsMQSICreateBarfile

    ant.importBuild 'build.xml'

  task runSoapUI {

    doLast {

      if (soapUIProject != 'None') {

        def soapuiParameters = soapUIParams + ' ' + soapUIProject
        ant.mruntest(soapuiexec: soapuiExec, params: soapuiParameters)

      } else {
        ant.echo('Nothing to do ...')
      }
    }
  }

  task multiDeploy() {

      doLast {

          integrationNodes.each {name, value ->

            ant.mdeploy(inode: value.intNode,
                        hostname: value.host,
                        port: value.port,
                        execgroup: value.intServer)
          }
        }
      }

tasks.multiDeploy {

  description "Invokes the mdeploy Ant macro to prepare the MQSI environment and deploy the compiled BAR file to one or more IIB integration nodes."
}

tasks.runSoapUI {

  description "Runs a SoapUI Test Project and generates a junit-style test report."
}

multiDeploy.dependsOn('compile', 'override')
runSoapUI.dependsOn('multiDeploy')
