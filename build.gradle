//build.gradle

  repositories {
      maven { url "http://repo.maven.apache.org/maven2" }
    }

    configurations {
      antClasspath
    }

    // dependency for XMLResultAggregator task

    dependencies {
      antClasspath 'org.apache.ant:ant-junit:1.8.2'
    }

// Select appropriate overrride properties file based on target deployment environment

switch (iibEnv) {

         case "PROD":
          ant.properties['iib.override.file'] = 'override-prod.properties'
          break;
         case "QA":
          ant.properties['iib.override.file'] = 'override-qa.properties'
          break;
         default:
         ant.properties['iib.override.file'] = 'override.properties'
}

  // Define parameters for use by runSoapUI task

  String soapuiExec, soapuiParameters

  // Set Ant properties based on underlying platform

if (org.gradle.internal.os.OperatingSystem.current().windows) {

        ant.properties['mqsi.deploy'] = 'mqsideploy.exe'
        ant.properties['mqsi.createbar'] = 'mqsicreatebar.exe'
        ant.properties['iib.path'] = mqsiprofilePathWin

        soapuiExec = soapUIPathWin + '\\testrunner.bat'

      } else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {

        ant.properties['mqsi.deploy'] = 'mqsideploy'
        ant.properties['mqsi.createbar'] = 'mqsicreatebar'
        ant.properties['iib.path'] = mqsiprofilePathMacOS

        soapuiExec = soapUIPathMacOS + '/testrunner.sh'

      } else {

        ant.properties['mqsi.deploy'] = 'mqsideploy'
        ant.properties['mqsi.createbar'] = 'mqsicreatebar'
        ant.properties['iib.path'] = mqsiprofilePathMacUnix

        soapuiExec = soapUIPathUnix + '/testrunner.sh'
}

  ant.properties['iib.barfile.dir'] = barfileDir
  ant.properties['iib.bar.version'] = barFileVersion
  ant.properties['iib.bar'] = appName
  ant.properties['iib.mqsicreatebar.params'] = paramsMQSICreateBarfile

  ant.importBuild 'build.xml'

  task runSoapUI {

    doLast {

      if (soapUIProject != 'None') {

          soapuiParameters = soapUIParams + ' ' + soapUIProject

          ant.mruntest(soapuiexec: soapuiExec, params: soapuiParameters)
          soapuiXmlToHtml(projectDir)

      } else {
          ant.echo('Nothing to do.')
    }
  }
}


  task multiDeploy() {

    File inFile = file('broker.properties')
    Properties brokers = readPropsFile(inFile)

    doLast {

      String[] brokerElems
      def iNode, hostName, Port, iServer

      brokers.each{ key, value ->

        brokerElems = value.split(':')

        // Not very elegant, but here goes ...
        iNode = brokerElems[0]
        hostName = brokerElems[1]
        Port = brokerElems[2]
        iServer = brokerElems[3]

        ant.mdeploy(inode: iNode,
                hostname: hostName,
                port: Port,
                execgroup: iServer)
              }
            }
          }

//------ Functions used by default tasks below this line ------

// function to perform XSLT transformation of soapUI xml test report to html
/*
 * Thanks to ... http://stackoverflow.com/questions/35770615/need-through-guidance-on-gradle-script-to-execute-soapui-project-xmls-and-genera/35774134#35774134
*/

def soapuiXmlToHtml(resultsDir) {

    def targetDir = new File(resultsDir, 'html')

    ant.taskdef(
        name: 'junitreport',
        classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        classpath: configurations.antClasspath.asPath
    )

    ant.junitreport(todir: resultsDir) {
        fileset(dir: resultsDir, includes: 'TEST-*.xml')
        report(todir: targetDir, format: "noframes")
    }
}

//------

Properties readPropsFile(File fProps) {

 logger.quiet 'Reading a properties file.'

 if (!fProps.exists()) {
     throw new GradleException(
     "Required properties file does not exist: $fProps.canonicalPath")
 }
  Properties props = new Properties()
  fProps.withInputStream { stream -> props.load(stream) }
  return props
}

tasks.multiDeploy {

  description "Uses the mqsideploy command to deploy the compiled BAR file to one or more IIB integration nodes."
}

tasks.runSoapUI {

  description "Runs a SoapUI Test Project and save the test results as a junit report in the html folder."
}

multiDeploy.dependsOn('compile', 'override')
runSoapUI.dependsOn('multiDeploy')
